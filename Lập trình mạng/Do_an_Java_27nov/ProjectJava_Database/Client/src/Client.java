
import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.Socket;
import java.nio.charset.StandardCharsets;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.SecureRandom;
import java.security.spec.X509EncodedKeySpec;

import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.KeyGenerator;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.spec.IvParameterSpec;
import javax.swing.JTable;
import javax.swing.WindowConstants;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author mai_d_000
 */
public class Client extends javax.swing.JFrame {

    /**
     * Creates new form Client
     */
    BufferedReader reader;
    PrintWriter writer;
    Socket sock;
    DataOutputStream dataOutputStream;
    DataInputStream dataInputStream;
    PublicKey clientPublicKey;
    PrivateKey privateKey;
    PublicKey serverPublicKey;
    SecretKey AESKey;
    
    private boolean isRSAKeySent = false;
    private boolean isAESKeySent = false;
    
    private class MessageType {
        
        final static int RSA_TYPE = 0;
        final static int AES_TYPE = 1;
        final static int DATA_TYPE = 2;
        final static int GET_PRODUCT_LIST = 3;
        final static int GET_ONE_PRODUCT = 4;
    }
    
    public Client() throws ClassNotFoundException, InstantiationException, IllegalAccessException {
        initComponents();
        
        tblProducts.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent mouseEvent) {
                int column = 1;
                int row = tblProducts.getSelectedRow();
                String productID = tblProducts.getModel().getValueAt(row, column).toString();
                if (mouseEvent.getClickCount() == 2 && tblProducts.getSelectedRow() != -1) {
                    try {
                        sendEncryptedMessage(productID, MessageType.GET_ONE_PRODUCT);
                    } catch (Exception ex) {
                        System.out.println(ex.toString());
                    }
                }
            }
        });
//Kết nối đến database
        //Class.forName("com.mysql.jdbc.Driver").newInstance();
        //conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/products", "root", "Password");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtServerAddress = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtPort = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtAESKey = new javax.swing.JTextField();
        btnConnect = new javax.swing.JButton();
        txtTestMessage = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        btnSendTestMessage = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        lblProductID = new javax.swing.JLabel();
        txtProductID = new javax.swing.JTextField();
        lblProductID1 = new javax.swing.JLabel();
        txtProductDesc = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblProducts = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Shopping adviser client");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Connection parameters"));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Server IP Address:");

        txtServerAddress.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtServerAddress.setText("127.0.0.1");
        txtServerAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtServerAddressActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Port:");

        txtPort.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtPort.setText("6789");
        txtPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPortActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("AES key");

        txtAESKey.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        btnConnect.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnConnect.setText("Connect");
        btnConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectActionPerformed(evt);
            }
        });

        txtTestMessage.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Test message:");

        btnSendTestMessage.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnSendTestMessage.setText("Send test message");
        btnSendTestMessage.setEnabled(false);
        btnSendTestMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendTestMessageActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtServerAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(btnConnect))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSendTestMessage)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3))))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtTestMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtAESKey, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(340, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtServerAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(txtAESKey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTestMessage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSendTestMessage)
                    .addComponent(btnConnect)))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Product Information", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        lblProductID.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblProductID.setText("Product ID:");

        txtProductID.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        lblProductID1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblProductID1.setText("Product description:");

        txtProductDesc.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        btnSearch.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnSearch.setText("Search");
        btnSearch.setEnabled(false);
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        tblProducts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Date", "Product ID", "Product description", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblProducts);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(lblProductID)
                        .addGap(18, 18, 18)
                        .addComponent(txtProductID, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblProductID1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtProductDesc, javax.swing.GroupLayout.DEFAULT_SIZE, 555, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSearch)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblProductID)
                    .addComponent(txtProductID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblProductID1)
                    .addComponent(txtProductDesc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPortActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPortActionPerformed
    public void EnableButtons() {
        btnSendTestMessage.setEnabled(true);
        btnSearch.setEnabled(true);
    }
    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectActionPerformed
        try {
            // TODO add your handling code here:
            btnConnect.setEnabled(false);
            setUpNetworking();
            generateKeys();
            
            Thread readerThread = new Thread(new IncomingReader(this, sock, clientPublicKey, privateKey, serverPublicKey, AESKey));
            readerThread.start();
            
        } catch (Exception ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnConnectActionPerformed

    private void btnSendTestMessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendTestMessageActionPerformed
        try {
            // TODO add your handling code here:
            sendEncryptedMessage(txtTestMessage.getText(), MessageType.DATA_TYPE);
        } catch (Exception ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSendTestMessageActionPerformed
    public void showChart(String strProductInfo) {
        // TODO add your handling code here:
        BarChart barChart = new BarChart("Đồ thị giá sản phẩm theo thời gian", strProductInfo);
        barChart.setAlwaysOnTop(true);
        barChart.pack();
        barChart.setSize(800, 600);
        barChart.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        barChart.setVisible(true);
        
    }

    public void FillTable(String strProductList) throws ClassNotFoundException, InstantiationException, IllegalAccessException {
        try {

            //   stmt = conn.createStatement();
            // rs = stmt.executeQuery("select * from tblProducts limit 10");
            //To remove previously added rows
            int columns = 4;
            
            String[] strRows = strProductList.split("aaa");
            Object[] strTmps = strRows[0].split("@@@");
            //Nếu không tìm thấy sản phẩm nào thỏa mãn điều kiện tìm kiếm thì không hiển thị danh sách
            if (strTmps[1].toString().equals("null"))
                return;
            
            while (tblProducts.getRowCount() > 0) {
                ((DefaultTableModel) tblProducts.getModel()).removeRow(0);
            }
            
            for (int i = 0; i < strRows.length; i++) {
                Object[] row = new Object[columns];
                String[] strColumns = strRows[i].split("@@@");
                for (int j = 0; j < strColumns.length; j++) {
                    row[j] = strColumns[j];
                }
                ((DefaultTableModel) tblProducts.getModel()).insertRow(i, row);
            }

            // int columns = rs.getMetaData().getColumnCount();
/*            
            while (rs.next()) {
                //System.out.println(rs.getString(1));
                Object[] row = new Object[columns];
                for (int i = 1; i <= columns; i++) {
                    row[i - 1] = rs.getObject(i);
                }
                ((DefaultTableModel) table.getModel()).insertRow(rs.getRow() - 1, row);
            }

            rs.close();
            stmt.close();
             */
        } catch (Exception e) {
            System.out.println(e.toString());
        }
        
    }

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        try {
            //Gửi thông tin tìm kiếm cho server theo product id và product description
            String strSearchFields;
            String strProductID = txtProductID.getText().trim();
            String strProductDesc = txtProductDesc.getText().trim();
            if (strProductID.length() == 0) {
                strProductID = "null";
            }
            if (strProductDesc.length() == 0) {
                strProductDesc = "null";
            }
            strSearchFields = strProductID + "@@@" + strProductDesc;
            sendEncryptedMessage(strSearchFields, MessageType.GET_PRODUCT_LIST);
        } catch (Exception ex) {
            System.out.println(ex.toString());
        }

    }//GEN-LAST:event_btnSearchActionPerformed

    private void txtServerAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtServerAddressActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtServerAddressActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Client().setVisible(true);
                } catch (Exception ex) {
                    System.out.println(ex.toString());
                } 
            }
        });
    }
    
    private void sendEncryptedMessage(String strOriginalMessage, int Message_Type) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, UnsupportedEncodingException, IllegalBlockSizeException, BadPaddingException, IOException, InvalidAlgorithmParameterException {
        
        Cipher cipher = Cipher.getInstance("AES");
        byte[] iv = new byte[16];
        byte[] encryptedData;
        cipher.init(Cipher.ENCRYPT_MODE, AESKey);
        encryptedData = cipher.doFinal(strOriginalMessage.getBytes("UTF-8"));
        String encrypted = new String(encryptedData);
        System.out.println("encrypted aes message: " + encrypted);
        
        int len = encryptedData.length;
        OutputStream outputStream = sock.getOutputStream();
        dataOutputStream = new DataOutputStream(outputStream);
        
        dataOutputStream.writeInt(len);
        dataOutputStream.writeInt(Message_Type);  //Loại dữ liệu là data chứ không phải là key
        dataOutputStream.write(encryptedData);
        dataOutputStream.flush();
    }
    
    private void sendRSAKey() throws IOException {
        
        byte[] bytesToSend = this.clientPublicKey.getEncoded();
        OutputStream outputStream = sock.getOutputStream();
        dataOutputStream = new DataOutputStream(outputStream);
        
        dataOutputStream.writeInt(bytesToSend.length);
        dataOutputStream.writeInt(MessageType.RSA_TYPE);
        dataOutputStream.write(bytesToSend);
        
        dataOutputStream.flush();
        System.out.println("Da gui public key cua client den server");
    }
    
    private void sendAESKey() throws IOException, NoSuchAlgorithmException, InvalidKeyException, NoSuchPaddingException, IllegalBlockSizeException, BadPaddingException {
        
        Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
        //serverPublicKey=(PublicKey) new SecretKeySpec(txtServerPublicKey.getText().getBytes(), "RSA");
        cipher.init(Cipher.ENCRYPT_MODE, serverPublicKey);
        byte[] encryptedData;
        encryptedData = cipher.doFinal(this.AESKey.getEncoded());
        dataOutputStream.writeInt(encryptedData.length);
        dataOutputStream.writeInt(MessageType.AES_TYPE);
        dataOutputStream.write(encryptedData);
        dataOutputStream.flush();
        System.out.println("Da gui AES key ma hoa cho server");
    }
    
    private String decryptAESMessage(byte[] encryptedData) {
        try {
            Cipher cipher = Cipher.getInstance("AES");
            cipher.init(Cipher.DECRYPT_MODE, AESKey);
            byte[] encrypted = cipher.doFinal(encryptedData);
            String strMessage = new String(encrypted, StandardCharsets.UTF_8);
            return strMessage;
        } catch (Exception ex) {
            System.out.println( ex.toString());
        }
        return null;
    }
    
    private void generateKeys() {
        try {
            // generate Public and Private Key
            KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA");
            SecureRandom random = SecureRandom.getInstanceStrong();
            keyPairGenerator.initialize(2048, random);
            KeyPair keyPair = keyPairGenerator.generateKeyPair();
            clientPublicKey = keyPair.getPublic();
            privateKey = keyPair.getPrivate();
            System.out.println("Public client key=" + clientPublicKey.toString());
            System.out.println("Private client key=" + clientPublicKey.toString());
            //Generate AES key
            KeyGenerator keyGen = KeyGenerator.getInstance("AES");
            random = new SecureRandom();
            keyGen.init(256, random);
            AESKey = keyGen.generateKey();
            txtAESKey.setText(AESKey.toString());
            
        } catch (Exception ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void setUpNetworking() throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException {
        try {
            String host = txtServerAddress.getText();
            int port = Integer.parseInt(txtPort.getText());
            String message = "The quick brown fox jumps over the lazy dog.";
            sock = new Socket(host, port);
            
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConnect;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSendTestMessage;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblProductID;
    private javax.swing.JLabel lblProductID1;
    private javax.swing.JTable tblProducts;
    private javax.swing.JTextField txtAESKey;
    private javax.swing.JTextField txtPort;
    private javax.swing.JTextField txtProductDesc;
    private javax.swing.JTextField txtProductID;
    private javax.swing.JTextField txtServerAddress;
    private javax.swing.JTextField txtTestMessage;
    // End of variables declaration//GEN-END:variables
}
